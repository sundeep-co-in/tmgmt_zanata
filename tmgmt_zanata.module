<?php

/**
 * @file
 * Module file for translation management Zanata module.
 *
 * http://zanata.org/
 *
 * Implemented by David Mason damason@redhat.com
 */

/**
 * Implements hook_tmgmt_translator_plugin_info()
 */
function tmgmt_zanata_tmgmt_translator_plugin_info() {
  return array(
    'zanata' => array(
      'label' => t('Zanata translator'),
      'description' => t('Service to translate strings with Zanata'),
      'plugin controller class' => 'TMGMTZanataTranslatorPluginController',
      'ui controller class' => 'TMGMTZanataTranslatorUIController',
      'auto create' => TRUE, // FIXME make sure auto create works properly
      'default settings' => array(
        'server' => 'http://localhost:8080/zanata',
      ),
      // TODO look at other settings on the hook page
    ),
  );
}

function _tmgmt_zanata_item_doc_id($job_item) {
  return "{$job_item->item_type}/{$job_item->item_id}";
}

function _tmgmt_zanata_item_url($base_url, TMGMTJobItem $job_item) {
  $encoded_id = strtr(_tmgmt_zanata_item_doc_id($job_item), '/', ',');
  return "{$base_url}/{$encoded_id}";
}

function _tmgmt_zanata_translation_url($base_url, TMGMTJobItem $job_item, $locale) {
  return _tmgmt_zanata_item_url($base_url, $job_item) . '/translations/' . $locale;
}


function tmgmt_zanata_resubmit_translations($form, &$form_state) {
  $job = $form_state['tmgmt_job'];
  $translator = $job->getTranslator();
  $controller = $translator->getController();
  $controller->resubmitTranslation($job);
}

/**
 * Callback used to poll for translations in the UI checkoutInfo form
 */
function tmgmt_zanata_poll_translations($form, &$form_state) {
  $job = $form_state['tmgmt_job'];
  $translator = $job->getTranslator();
  $controller = $translator->getController();
  $connector = $controller->getConnector($translator);
  $base_url = $connector->getBaseUrl();
  $locale = $controller->mapToRemoteLanguage($translator, $job->target_language);

  $base_options = $controller->getBaseOptions($translator);


  // FIXME skip any item that is completed (to avoid excess network traffic)

  foreach ($job->getItems() as $job_item) {
    $url = _tmgmt_zanata_translation_url($base_url, $job_item, $locale);

    $options = $base_options;

    $response = drupal_http_request($url, $options);

    if ($response->code != 200) {
      if ($response->code == 404) {
        // this may not really be worth logging, is could just be considered noise
        $job_item->addMessage(t('No translations are available yet.'));
      } else {
        drupal_set_message(t('There was a problem fetching translations from the service. See messages below.'), 'warning', FALSE);
        $job_item->addMessage(t('Tried to update translations but got response code @code when fetching URL @url.'),
                              array(
                                '@code' => $response->code,
                                '@url' => $url));
      }
    } else {
      $data = drupal_json_decode($response->data);
      $targets = $data['textFlowTargets'];

      $translated = array();
      foreach ($targets as $target) {
        // TODO map Zanata states sensibly to TMGMT states
        if ($target['state'] == 'Approved') {
          $key = (string) $target['resId'];
          $translated[$key]['#text'] = (string) $target['content'];
        }
      }

      $expanded_translated = tmgmt_unflatten_data($translated);
      $job_item->addTranslatedData($expanded_translated);
    }
  }
}
